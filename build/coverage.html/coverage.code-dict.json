{"/home/travis/build/npmtest/node-npmtest-apostrophe/test.js":"/* istanbul instrument in package npmtest_apostrophe */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-apostrophe/lib.npmtest_apostrophe.js":"/* istanbul instrument in package npmtest_apostrophe */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_apostrophe = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_apostrophe = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-apostrophe/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-apostrophe && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_apostrophe */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_apostrophe\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_apostrophe.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_apostrophe.rollup.js'] =\n            local.assetsDict['/assets.npmtest_apostrophe.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_apostrophe.__dirname + '/lib.npmtest_apostrophe.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-apostrophe/node_modules/apostrophe/index.js":"var path = require('path');\nvar _ = require('lodash');\nvar argv = require('yargs').argv;\nvar fs = require('fs');\nvar async = require('async');\nvar i18n = require('i18n');\n\nvar defaults = require('./defaults.js');\n\nmodule.exports = function(options) {\n  var self = {};\n\n  // Determine root module and root directory\n  self.root = options.root || getRoot();\n  self.rootDir = options.rootDir || path.dirname(self.root.filename);\n\n  self.options = mergeConfiguration(options, defaults);\n  acceptGlobalOptions();\n\n  self.handlers = {};\n\n  // EVENT HANDLING\n  //\n  // apos.emit(eventName, /* arg1, arg2, arg3... */)\n  //\n  // Emit an Apostrophe event. All handlers that have been set\n  // with apos.on for the same eventName will be invoked. Any additional\n  // arguments are received by the handler functions as arguments.\n  //\n  // For bc, Apostrophe events are also triggered on the\n  // body element via jQuery. The event name \"ready\" becomes\n  // \"aposReady\" in jQuery. This feature will be removed in 0.6.\n  //\n  // CURRENT EVENTS\n  //\n  // 'enhance' is triggered to request progressive enhancement\n  // of form elements newly loaded into the DOM.\n  // It is most often listened for in admin modals.\n  //\n  // 'ready' is triggered when the main content area of the page\n  // has been refreshed.\n\n  self.emit = function(eventName /* ,arg1, arg2, arg3... */) {\n    var handlers = self.handlers[eventName];\n    if (!handlers) {\n      return;\n    }\n    var args = Array.prototype.slice.call(arguments, 1);\n    var i;\n    for (i = 0; (i < handlers.length); i++) {\n      handlers[i].apply(self, args);\n    }\n  };\n\n  // Install an Apostrophe event handler. The handler will be called\n  // when apos.emit is invoked with the same eventName. The handler\n  // will receive any additional arguments passed to apos.emit.\n\n  self.on = function(eventName, fn) {\n    self.handlers[eventName] = (self.handlers[eventName] || []).concat([ fn ]);\n  };\n\n  // Remove an Apostrophe event handler. If fn is not supplied, all\n  // handlers for the given eventName are removed.\n  self.off = function(eventName, fn) {\n    if (!fn) {\n      delete self.handlers[eventName];\n      return;\n    }\n    self.handlers[eventName] = _.filter(self.handlers[eventName], function(_fn) {\n      return fn !== _fn;\n    });\n  };\n\n  /**\n   * For every module, if the method `method` exists,\n   * invoke it. The method may optionally take a callback.\n   * The method must take exactly as many additional\n   * arguments as are passed here between `method`\n   * and the final `callback`.\n   */\n  self.callAll = function(method, /* argument, ... */ callback) {\n    var args = Array.prototype.slice.call(arguments);\n    var extraArgs = args.slice(1, args.length - 1);\n    callback = args[args.length - 1];\n    return async.eachSeries(_.keys(self.modules), function(name, callback) {\n      var module = self.modules[name];\n      var invoke = module[method];\n      if (invoke) {\n        if (invoke.length === (1 + extraArgs.length)) {\n          return invoke.apply(module, extraArgs.concat([callback]));\n        } else if (invoke.length === extraArgs.length) {\n          return setImmediate(function() {\n            try {\n              invoke.apply(module, extraArgs);\n            } catch (e) {\n              return callback(e);\n            }\n            return callback(null);\n          });\n        } else {\n          return callback(name + ' module: your ' + method + ' method must take ' + extraArgs.length + ' arguments, plus an optional callback.');\n        }\n      } else {\n        return setImmediate(callback);\n      }\n    }, function(err) {\n      if (err) {\n        return callback(err);\n      }\n      return callback(null);\n    });\n  };\n\n  // Helper function for other modules to determine whether the application\n  // is running as a server or a task\n  self.isTask = function() {\n    return !!self.argv._.length;\n  };\n\n  defineModules();\n\n  // No return statement here because we need to\n  // return \"self\" after kicking this process off\n\n  async.series([\n    instantiateModules,\n    modulesReady,\n    modulesAfterInit,\n    afterInit\n  ], function(err) {\n    if (err) {\n      if (options.initFailed) {\n        // Report error in an extensible way\n        return options.initFailed(err);\n      } else {\n        // In the absence of a callback to handle initialization failure,\n        // we have to assume there's just one instance of Apostrophe and\n        // we can print the error and end the app.\n        \n        // Currently v8's err.stack property contains both the stack and the error message,\n        // but that's weird and could be temporary, so if it ever changes, output both. -Tom\n        if ((typeof(err.stack) !== 'string') || (err.stack.indexOf(err.toString()) === -1)) {\n          console.error(err);\n        }\n        console.error(err.stack);\n        process.exit(1);\n      }\n    }\n    if (self.argv._.length) {\n      self.emit('runTask');\n    } else {\n      // The apostrophe-express module adds this method\n      self.listen();\n    }\n  });\n\n  // Return self so that app.js can refer to apos\n  // in inline functions, etc.\n  return self;\n\n  // SUPPORTING FUNCTIONS BEGIN HERE\n\n  // Merge configuration from defaults, data/local.js and app.js\n  function mergeConfiguration(options, defaults) {\n    var config = {};\n    var local = {};\n    var localPath = options.__localPath || '/data/local.js';\n    var reallyLocalPath = self.rootDir + localPath;\n\n    if (fs.existsSync(reallyLocalPath)) {\n      local = require(reallyLocalPath);\n    }\n\n    // Otherwise making a second apos instance\n    // uses the same modified defaults object\n\n    var config = _.cloneDeep(options.__testDefaults || defaults);\n\n    var coreModules = _.cloneDeep(config.modules);\n\n    _.merge(config, options);\n\n    if (typeof(local) === 'function') {\n      if (local.length === 1) {\n        _.merge(config, local(self));\n      } else if (local.length === 2) {\n        local(self, config);\n      } else {\n        throw 'data/local.js may export an object, a function that takes apos as an argument and returns an object, OR a function that takes apos and config as objects and directly modifies config';\n      }\n    } else {\n       _.merge(config, local || {});\n    }\n\n    return config;\n  }\n\n  function getRoot() {\n    var m = module;\n    while (m.parent) {\n      m = m.parent;\n      module = m;\n    }\n    return module;\n  }\n\n  function acceptGlobalOptions() {\n    // Truly global options not specific to a module\n\n    self.argv = argv;\n\n    self.shortName = self.options.shortName;\n    if (!self.shortName) {\n      throw \"Specify the `shortName` option and set it to the name of your project's repository or folder\";\n    }\n    self.title = self.options.title;\n    self.baseUrl = self.options.baseUrl;\n    self.prefix = self.options.prefix || '';\n  }\n\n  function defineModules() {\n    // Set moog-require up to create our module manager objects\n\n    var synth = require('moog-require')({\n      root: self.root,\n      bundles: [ 'apostrophe' ].concat(self.options.bundles || []),\n      localModules: self.options.__testLocalModules || (self.rootDir + '/lib/modules'),\n      defaultBaseClass: 'apostrophe-module'\n    });\n\n    self.synth = synth;\n\n    // Just like on the browser side, we can\n    // call apos.define rather than apos.synth.define\n    self.define = self.synth.define;\n    self.redefine = self.synth.redefine;\n    self.create = self.synth.create;\n\n    _.each(self.options.modules, function(options, name) {\n      synth.define(name, options);\n    });\n\n    return synth;\n  }\n\n  function instantiateModules(callback) {\n    self.modules = {};\n    return async.eachSeries(_.keys(self.options.modules), function(item, callback) {\n      var improvement = self.synth.isImprovement(item);\n      if (self.options.modules[item] && (improvement || self.options.modules[item].instantiate === false)) {\n        // We don't want an actual instance of this module, we are using it\n        // as an abstract base class in this particular project (but still\n        // configuring it, to easily carry those options to subclasses, which\n        // is how we got here)\n        return setImmediate(callback);\n      }\n      return self.synth.create(item, { apos: self }, function(err, obj) {\n        if (err) {\n          console.error('Error while constructing the ' + item + ' module');\n          return callback(err);\n        }\n        return callback(null);\n      });\n    }, function(err) {\n      return setImmediate(function() {\n        return callback(err);\n      });\n    });\n  }\n\n  function modulesReady(callback) {\n    return self.callAll('modulesReady', callback);\n  }\n\n  function modulesAfterInit(callback) {\n    return self.callAll('afterInit', callback);\n  }\n\n  function afterInit(callback) {\n    // Give project-level code a chance to run before we\n    // listen or run a task\n    if (!self.options.afterInit) {\n      return setImmediate(callback);\n    }\n    return self.options.afterInit(callback);\n  }\n\n};\n\nvar abstractClasses = [ 'apostrophe-module', 'apostrophe-widgets', 'apostrophe-custom-pages', 'apostrophe-pieces', 'apostrophe-pieces-pages', 'apostrophe-pieces-widgets', 'apostrophe-doc-type-manager' ];\n\nmodule.exports.moogBundle = {\n  modules: abstractClasses.concat(_.keys(defaults.modules)),\n  directory: 'lib/modules'\n};\n","/home/travis/build/npmtest/node-npmtest-apostrophe/node_modules/apostrophe/defaults.js":"module.exports = {\n  modules: {\n    'apostrophe-utils': {},\n    'apostrophe-tasks': {},\n    'apostrophe-launder': {},\n    'apostrophe-i18n': {},\n    'apostrophe-db': {},\n    'apostrophe-locks': {},\n    'apostrophe-caches': {},\n    'apostrophe-migrations': {},\n    'apostrophe-express': {},\n    'apostrophe-push': {},\n    'apostrophe-urls': {},\n    'apostrophe-templates': {},\n    'apostrophe-permissions': {},\n    'apostrophe-assets': {},\n    'apostrophe-admin-bar': {},\n    'apostrophe-login': {},\n    'apostrophe-browser-utils': {},\n    'apostrophe-ui': {},\n    'apostrophe-schemas': {},\n    'apostrophe-docs': {},\n    'apostrophe-versions': {},\n    'apostrophe-tags': {},\n    'apostrophe-modal': {},\n    'apostrophe-attachments': {},\n    'apostrophe-oembed': {},\n    'apostrophe-pager': {},\n    // global comes first so it can register a doc type manager and clean things up before\n    // pages claims any orphan page types\n    'apostrophe-global': {},\n    'apostrophe-pages': {},\n    'apostrophe-search': {},\n    'apostrophe-any-page-manager': {},\n    'apostrophe-areas': {},\n    'apostrophe-rich-text-widgets': {},\n    'apostrophe-html-widgets': {},\n    'apostrophe-video-fields': {},\n    'apostrophe-video-widgets': {},\n    'apostrophe-groups': {},\n    'apostrophe-users': {},\n    'apostrophe-images': {},\n    'apostrophe-images-widgets': {},\n    'apostrophe-files': {},\n    'apostrophe-files-widgets': {},\n    'apostrophe-service-bridge': {}\n  }\n};\n"}